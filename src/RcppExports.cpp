// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// subsets_cpp
List subsets_cpp(unsigned int const& d);
RcppExport SEXP _satdad_subsets_cpp(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int const& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(subsets_cpp(d));
    return rcpp_result_gen;
END_RCPP
}
// sort_sub_cpp
std::vector<std::vector<int>> sort_sub_cpp(std::vector<std::vector<int>> sub);
RcppExport SEXP _satdad_sort_sub_cpp(SEXP subSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_sub_cpp(sub));
    return rcpp_result_gen;
END_RCPP
}
// generate_asy_sub_cpp
std::vector<std::vector<double>> generate_asy_sub_cpp(unsigned int  const& d, std::vector<std::vector<int>> const& sub);
RcppExport SEXP _satdad_generate_asy_sub_cpp(SEXP dSEXP, SEXP subSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int  const& >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> const& >::type sub(subSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_asy_sub_cpp(d, sub));
    return rcpp_result_gen;
END_RCPP
}
// find_missing_indices_cpp
std::vector<int> find_missing_indices_cpp(int d, std::vector<std::vector<int>> sub);
RcppExport SEXP _satdad_find_missing_indices_cpp(SEXP dSEXP, SEXP subSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    rcpp_result_gen = Rcpp::wrap(find_missing_indices_cpp(d, sub));
    return rcpp_result_gen;
END_RCPP
}
// algo21_numMat_cpp
NumericMatrix algo21_numMat_cpp(int n, int d, double alpha);
RcppExport SEXP _satdad_algo21_numMat_cpp(SEXP nSEXP, SEXP dSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(algo21_numMat_cpp(n, d, alpha));
    return rcpp_result_gen;
END_RCPP
}
// algo22_numMat_cpp
NumericMatrix algo22_numMat_cpp(int n, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy);
RcppExport SEXP _satdad_algo22_numMat_cpp(SEXP nSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    rcpp_result_gen = Rcpp::wrap(algo22_numMat_cpp(n, d, sub, dep, asy));
    return rcpp_result_gen;
END_RCPP
}
// ellmevlogv_cpp
double ellmevlogv_cpp(NumericVector v, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy);
RcppExport SEXP _satdad_ellmevlogv_cpp(SEXP vSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    rcpp_result_gen = Rcpp::wrap(ellmevlogv_cpp(v, d, sub, dep, asy));
    return rcpp_result_gen;
END_RCPP
}
// ratio_diff_pmevlogv_cpp
double ratio_diff_pmevlogv_cpp(NumericVector v, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy);
RcppExport SEXP _satdad_ratio_diff_pmevlogv_cpp(SEXP vSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    rcpp_result_gen = Rcpp::wrap(ratio_diff_pmevlogv_cpp(v, d, sub, dep, asy));
    return rcpp_result_gen;
END_RCPP
}
// ratio_diff_pmevlogm_cpp
std::vector<double> ratio_diff_pmevlogm_cpp(NumericMatrix v, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy);
RcppExport SEXP _satdad_ratio_diff_pmevlogm_cpp(SEXP vSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    rcpp_result_gen = Rcpp::wrap(ratio_diff_pmevlogm_cpp(v, d, sub, dep, asy));
    return rcpp_result_gen;
END_RCPP
}
// ratio_diff_pmevlogv_marv_cpp
double ratio_diff_pmevlogv_marv_cpp(NumericVector v, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy, NumericVector mar);
RcppExport SEXP _satdad_ratio_diff_pmevlogv_marv_cpp(SEXP vSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP, SEXP marSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mar(marSEXP);
    rcpp_result_gen = Rcpp::wrap(ratio_diff_pmevlogv_marv_cpp(v, d, sub, dep, asy, mar));
    return rcpp_result_gen;
END_RCPP
}
// ratio_diff_pmevlogm_marv_cpp
std::vector<double> ratio_diff_pmevlogm_marv_cpp(NumericMatrix v, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy, NumericVector mar);
RcppExport SEXP _satdad_ratio_diff_pmevlogm_marv_cpp(SEXP vSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP, SEXP marSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mar(marSEXP);
    rcpp_result_gen = Rcpp::wrap(ratio_diff_pmevlogm_marv_cpp(v, d, sub, dep, asy, mar));
    return rcpp_result_gen;
END_RCPP
}
// ratio_diff_pmevlogv_marm_cpp
double ratio_diff_pmevlogv_marm_cpp(NumericVector v, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy, NumericMatrix mar);
RcppExport SEXP _satdad_ratio_diff_pmevlogv_marm_cpp(SEXP vSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP, SEXP marSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mar(marSEXP);
    rcpp_result_gen = Rcpp::wrap(ratio_diff_pmevlogv_marm_cpp(v, d, sub, dep, asy, mar));
    return rcpp_result_gen;
END_RCPP
}
// ratio_diff_pmevlogm_marm_cpp
std::vector<double> ratio_diff_pmevlogm_marm_cpp(NumericMatrix v, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy, NumericMatrix mar);
RcppExport SEXP _satdad_ratio_diff_pmevlogm_marm_cpp(SEXP vSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP, SEXP marSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mar(marSEXP);
    rcpp_result_gen = Rcpp::wrap(ratio_diff_pmevlogm_marm_cpp(v, d, sub, dep, asy, mar));
    return rcpp_result_gen;
END_RCPP
}
// ellmevlogm_cpp
NumericVector ellmevlogm_cpp(NumericMatrix v, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy);
RcppExport SEXP _satdad_ellmevlogm_cpp(SEXP vSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    rcpp_result_gen = Rcpp::wrap(ellmevlogm_cpp(v, d, sub, dep, asy));
    return rcpp_result_gen;
END_RCPP
}
// ecdsmevlog_cpp
NumericVector ecdsmevlog_cpp(int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy, List ind);
RcppExport SEXP _satdad_ecdsmevlog_cpp(SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    Rcpp::traits::input_parameter< List >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(ecdsmevlog_cpp(d, sub, dep, asy, ind));
    return rcpp_result_gen;
END_RCPP
}
// tsicdsmevlog_list_cpp
NumericVector tsicdsmevlog_list_cpp(int N, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy, List L);
RcppExport SEXP _satdad_tsicdsmevlog_list_cpp(SEXP NSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    Rcpp::traits::input_parameter< List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(tsicdsmevlog_list_cpp(N, d, sub, dep, asy, L));
    return rcpp_result_gen;
END_RCPP
}
// tsicdsmevlog_empty_cpp
double tsicdsmevlog_empty_cpp(int N, int d, std::vector<std::vector<int>> sub, std::vector<double> dep, std::vector<std::vector<double>> asy);
RcppExport SEXP _satdad_tsicdsmevlog_empty_cpp(SEXP NSEXP, SEXP dSEXP, SEXP subSEXP, SEXP depSEXP, SEXP asySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>> >::type sub(subSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dep(depSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type asy(asySEXP);
    rcpp_result_gen = Rcpp::wrap(tsicdsmevlog_empty_cpp(N, d, sub, dep, asy));
    return rcpp_result_gen;
END_RCPP
}
// ellEmp_cpp
NumericMatrix ellEmp_cpp(arma::vec const& kvec, arma::mat const& x, arma::mat const& sample);
RcppExport SEXP _satdad_ellEmp_cpp(SEXP kvecSEXP, SEXP xSEXP, SEXP sampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type kvec(kvecSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sample(sampleSEXP);
    rcpp_result_gen = Rcpp::wrap(ellEmp_cpp(kvec, x, sample));
    return rcpp_result_gen;
END_RCPP
}
// rankbar_cpp
arma::mat rankbar_cpp(arma::mat const& x, unsigned int k);
RcppExport SEXP _satdad_rankbar_cpp(SEXP xSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rankbar_cpp(x, k));
    return rcpp_result_gen;
END_RCPP
}
// ratioall_cpp
List ratioall_cpp(arma::mat const& R);
RcppExport SEXP _satdad_ratioall_cpp(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(ratioall_cpp(R));
    return rcpp_result_gen;
END_RCPP
}
// ratioallsobol_cpp
List ratioallsobol_cpp(arma::mat const& R);
RcppExport SEXP _satdad_ratioallsobol_cpp(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(ratioallsobol_cpp(R));
    return rcpp_result_gen;
END_RCPP
}
// prodmin_cpp
arma::mat prodmin_cpp(arma::mat const& R);
RcppExport SEXP _satdad_prodmin_cpp(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(prodmin_cpp(R));
    return rcpp_result_gen;
END_RCPP
}
// prodprod_cpp
arma::mat prodprod_cpp(arma::mat const& R);
RcppExport SEXP _satdad_prodprod_cpp(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(prodprod_cpp(R));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_satdad_subsets_cpp", (DL_FUNC) &_satdad_subsets_cpp, 1},
    {"_satdad_sort_sub_cpp", (DL_FUNC) &_satdad_sort_sub_cpp, 1},
    {"_satdad_generate_asy_sub_cpp", (DL_FUNC) &_satdad_generate_asy_sub_cpp, 2},
    {"_satdad_find_missing_indices_cpp", (DL_FUNC) &_satdad_find_missing_indices_cpp, 2},
    {"_satdad_algo21_numMat_cpp", (DL_FUNC) &_satdad_algo21_numMat_cpp, 3},
    {"_satdad_algo22_numMat_cpp", (DL_FUNC) &_satdad_algo22_numMat_cpp, 5},
    {"_satdad_ellmevlogv_cpp", (DL_FUNC) &_satdad_ellmevlogv_cpp, 5},
    {"_satdad_ratio_diff_pmevlogv_cpp", (DL_FUNC) &_satdad_ratio_diff_pmevlogv_cpp, 5},
    {"_satdad_ratio_diff_pmevlogm_cpp", (DL_FUNC) &_satdad_ratio_diff_pmevlogm_cpp, 5},
    {"_satdad_ratio_diff_pmevlogv_marv_cpp", (DL_FUNC) &_satdad_ratio_diff_pmevlogv_marv_cpp, 6},
    {"_satdad_ratio_diff_pmevlogm_marv_cpp", (DL_FUNC) &_satdad_ratio_diff_pmevlogm_marv_cpp, 6},
    {"_satdad_ratio_diff_pmevlogv_marm_cpp", (DL_FUNC) &_satdad_ratio_diff_pmevlogv_marm_cpp, 6},
    {"_satdad_ratio_diff_pmevlogm_marm_cpp", (DL_FUNC) &_satdad_ratio_diff_pmevlogm_marm_cpp, 6},
    {"_satdad_ellmevlogm_cpp", (DL_FUNC) &_satdad_ellmevlogm_cpp, 5},
    {"_satdad_ecdsmevlog_cpp", (DL_FUNC) &_satdad_ecdsmevlog_cpp, 5},
    {"_satdad_tsicdsmevlog_list_cpp", (DL_FUNC) &_satdad_tsicdsmevlog_list_cpp, 6},
    {"_satdad_tsicdsmevlog_empty_cpp", (DL_FUNC) &_satdad_tsicdsmevlog_empty_cpp, 5},
    {"_satdad_ellEmp_cpp", (DL_FUNC) &_satdad_ellEmp_cpp, 3},
    {"_satdad_rankbar_cpp", (DL_FUNC) &_satdad_rankbar_cpp, 2},
    {"_satdad_ratioall_cpp", (DL_FUNC) &_satdad_ratioall_cpp, 1},
    {"_satdad_ratioallsobol_cpp", (DL_FUNC) &_satdad_ratioallsobol_cpp, 1},
    {"_satdad_prodmin_cpp", (DL_FUNC) &_satdad_prodmin_cpp, 1},
    {"_satdad_prodprod_cpp", (DL_FUNC) &_satdad_prodprod_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_satdad(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
